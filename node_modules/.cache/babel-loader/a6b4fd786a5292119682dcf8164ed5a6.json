{"ast":null,"code":"var _jsxFileName = \"/home/roberto/\\xC1rea de Trabalho/rocketseat/GoBarberReactJS/front-end/src/pages/Main/index.js\";\nimport React, { Component } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport { Form, SubmitButton, List } from './styles';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\nexport default class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newRepo: '',\n      repositories: [],\n      loading: false\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        newRepo: e.target.value\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const {\n        newRepo,\n        repositories\n      } = this.state;\n      const response = await api.get(`/repos/${newRepo}`);\n      const data = {\n        name: response.data.full_name\n      };\n      this.setState({\n        repositories: [...repositories, data],\n        newRepo: '',\n        loading: false\n      });\n    };\n  }\n\n  // Carregar os dados do localStorage\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({\n        repositories: JSON.parse(repositories)\n      });\n    }\n  } // salvar os dados do localstorage\n\n\n  componentDidUpdate(_, prevState) {\n    const {\n      repositories\n    } = this.state;\n\n    if (prevState.repositories !== repositories) {\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  render() {\n    const {\n      newRepo,\n      repositories,\n      loading\n    } = this.state;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(FaGithubAlt, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), \"Reposit\\xF3rios\"), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"teste\",\n      placeholder: \"Adicionar reposit\\xF3rio\",\n      value: newRepo,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(SubmitButton, {\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, loading ? React.createElement(FaSpinner, {\n      color: \"#fff\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }) : React.createElement(FaPlus, {\n      color: \"#fff\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, repositories.map(repository => React.createElement(\"li\", {\n      key: repository.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, repository.name), React.createElement(Link, {\n      to: `/repository/${encodeURIComponent(repository.name)}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Detalhes\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/roberto/Área de Trabalho/rocketseat/GoBarberReactJS/front-end/src/pages/Main/index.js"],"names":["React","Component","FaGithubAlt","FaPlus","FaSpinner","Link","Form","SubmitButton","List","api","Container","Main","state","newRepo","repositories","loading","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","response","get","data","name","full_name","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","_","prevState","setItem","stringify","render","map","repository","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport { Form, SubmitButton, List } from './styles';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\n\nexport default class Main extends Component {\n  // eslint-disable-next-line react/state-in-constructor\n  state = {\n    newRepo: '',\n    repositories: [],\n    loading: false,\n  };\n\n  // Carregar os dados do localStorage\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({ repositories: JSON.parse(repositories) });\n    }\n  }\n\n  // salvar os dados do localstorage\n  componentDidUpdate(_, prevState) {\n    const { repositories } = this.state;\n\n    if (prevState.repositories !== repositories) {\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  handleInputChange = e => {\n    this.setState({ newRepo: e.target.value });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n\n    this.setState({ loading: true });\n\n    const { newRepo, repositories } = this.state;\n    const response = await api.get(`/repos/${newRepo}`);\n\n    const data = {\n      name: response.data.full_name,\n    };\n\n    this.setState({\n      repositories: [...repositories, data],\n      newRepo: '',\n      loading: false,\n    });\n  };\n\n  render() {\n    const { newRepo, repositories, loading } = this.state;\n\n    return (\n      <Container>\n        <h1>\n          <FaGithubAlt />\n          Repositórios\n        </h1>\n\n        <Form onSubmit={this.handleSubmit}>\n          <input\n            type=\"teste\"\n            placeholder=\"Adicionar repositório\"\n            value={newRepo}\n            onChange={this.handleInputChange}\n          />\n          <SubmitButton loading={loading}>\n            {loading ? (\n              <FaSpinner color=\"#fff\" size={14} />\n            ) : (\n              <FaPlus color=\"#fff\" size={14} />\n            )}\n          </SubmitButton>\n        </Form>\n\n        <List>\n          {repositories.map(repository => (\n            <li key={repository.name}>\n              <span>{repository.name}</span>\n              <Link to={`/repository/${encodeURIComponent(repository.name)}`}>\n                Detalhes\n              </Link>\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}