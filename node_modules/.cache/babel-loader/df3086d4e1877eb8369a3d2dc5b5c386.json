{"ast":null,"code":"import { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport history from '../../../services/history';\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCartRequest({\n  id\n}) {\n  const response = yield call(api.get, `/products/${id}`);\n  const productExists = yield select(state => state.cart.find(p => p.id === id));\n  const stock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const data = { ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    };\n    yield put(addToCartSuccess(data));\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmountRequest({\n  id,\n  amount\n}) {\n  if (amount <= 0) return;\n  const stock = yield call(api.get, `stock/${id}`);\n  const stockAmount = stock.data.amount;\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCartRequest), takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmountRequest)]);","map":{"version":3,"sources":["/home/roberto/Área de Trabalho/reactjs/rocketshoes/src/store/modules/cart/sagas.js"],"names":["call","select","put","all","takeLatest","toast","api","history","addToCartSuccess","updateAmountSuccess","formatPrice","addToCartRequest","id","response","get","productExists","state","cart","find","p","stock","stockAmount","data","amount","currentAmount","error","priceFormatted","price","push","updateAmountRequest"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,UAAjC,QAAmD,oBAAnD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,SAASC,gBAAT,EAA2BC,mBAA3B,QAAsD,WAAtD;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,UAAUC,gBAAV,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAmC;AACjC,QAAMC,QAAQ,GAAG,MAAMb,IAAI,CAACM,GAAG,CAACQ,GAAL,EAAW,aAAYF,EAAG,EAA1B,CAA3B;AAEA,QAAMG,aAAa,GAAG,MAAMd,MAAM,CAACe,KAAK,IACtCA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACP,EAAF,KAASA,EAA9B,CADgC,CAAlC;AAIA,QAAMQ,KAAK,GAAG,MAAMpB,IAAI,CAACM,GAAG,CAACQ,GAAL,EAAW,UAASF,EAAG,EAAvB,CAAxB;AACA,QAAMS,WAAW,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAA/B;AACA,QAAMC,aAAa,GAAGT,aAAa,GAAGA,aAAa,CAACQ,MAAjB,GAA0B,CAA7D;AAEA,QAAMA,MAAM,GAAGC,aAAa,GAAG,CAA/B;;AAEA,MAAID,MAAM,GAAGF,WAAb,EAA0B;AACxBhB,IAAAA,KAAK,CAACoB,KAAN,CAAY,uCAAZ;AACA;AACD;;AAED,MAAIV,aAAJ,EAAmB;AACjB,UAAMb,GAAG,CAACO,mBAAmB,CAACG,EAAD,EAAKW,MAAL,CAApB,CAAT;AACD,GAFD,MAEO;AACL,UAAMD,IAAI,GAAG,EACX,GAAGT,QAAQ,CAACS,IADD;AAEXC,MAAAA,MAAM,EAAE,CAFG;AAGXG,MAAAA,cAAc,EAAEhB,WAAW,CAACG,QAAQ,CAACS,IAAT,CAAcK,KAAf;AAHhB,KAAb;AAMA,UAAMzB,GAAG,CAACM,gBAAgB,CAACc,IAAD,CAAjB,CAAT;AAEAf,IAAAA,OAAO,CAACqB,IAAR,CAAa,OAAb;AACD;AACF;;AAED,UAAUC,mBAAV,CAA8B;AAAEjB,EAAAA,EAAF;AAAMW,EAAAA;AAAN,CAA9B,EAA8C;AAC5C,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAEjB,QAAMH,KAAK,GAAG,MAAMpB,IAAI,CAACM,GAAG,CAACQ,GAAL,EAAW,SAAQF,EAAG,EAAtB,CAAxB;AACA,QAAMS,WAAW,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAA/B;;AACA,MAAIA,MAAM,GAAGF,WAAb,EAA0B;AACxBhB,IAAAA,KAAK,CAACoB,KAAN,CAAY,uCAAZ;AACA;AACD;;AAED,QAAMvB,GAAG,CAACO,mBAAmB,CAACG,EAAD,EAAKW,MAAL,CAApB,CAAT;AACD;;AAED,eAAepB,GAAG,CAAC,CACjBC,UAAU,CAAC,mBAAD,EAAsBO,gBAAtB,CADO,EAEjBP,UAAU,CAAC,6BAAD,EAAgCyB,mBAAhC,CAFO,CAAD,CAAlB","sourcesContent":["import { call, select, put, all, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\n\nimport api from '../../../services/api';\nimport history from '../../../services/history';\n\nimport { addToCartSuccess, updateAmountSuccess } from './actions';\nimport { formatPrice } from '../../../util/format';\n\nfunction* addToCartRequest({ id }) {\n  const response = yield call(api.get, `/products/${id}`);\n\n  const productExists = yield select(state =>\n    state.cart.find(p => p.id === id)\n  );\n\n  const stock = yield call(api.get, `/stock/${id}`);\n  const stockAmount = stock.data.amount;\n  const currentAmount = productExists ? productExists.amount : 0;\n\n  const amount = currentAmount + 1;\n\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque');\n    return;\n  }\n\n  if (productExists) {\n    yield put(updateAmountSuccess(id, amount));\n  } else {\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price),\n    };\n\n    yield put(addToCartSuccess(data));\n\n    history.push('/cart');\n  }\n}\n\nfunction* updateAmountRequest({ id, amount }) {\n  if (amount <= 0) return;\n\n  const stock = yield call(api.get, `stock/${id}`);\n  const stockAmount = stock.data.amount;\n  if (amount > stockAmount) {\n    toast.error('Quantidade solicitada fora de estoque');\n    return;\n  }\n\n  yield put(updateAmountSuccess(id, amount));\n}\n\nexport default all([\n  takeLatest('@cart/ADD_REQUEST', addToCartRequest),\n  takeLatest('@cart/UPDATE_AMOUNT_REQUEST', updateAmountRequest),\n]);\n"]},"metadata":{},"sourceType":"module"}